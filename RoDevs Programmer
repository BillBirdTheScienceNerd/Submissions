-- /// Local script:

-- // Calling useful variables

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local ServerStorage = game:GetService("ServerStorage")

local RankModule = require(ReplicatedFirst:WaitForChild("Ranks"))
local CommandModule = require(ReplicatedFirst:WaitForChild("CommandModule"))

local player = game.Players.LocalPlayer
local playerRank = nil

local events = ReplicatedStorage:WaitForChild("Events")

local gui = script.Parent
local frame = gui:WaitForChild("Frame")
local commandBox = frame:WaitForChild("CommandBox")

local button = gui:WaitForChild("AdminPanelButton")

-- // Calling useful functions

local function OnCommandFinished(success, errormessage, command)
	if success == true and command then
		frame.LastCommand.Text = "Success: " .. command
		frame.LastCommand.TextColor3 = Color3.fromRGB(79, 255, 100)
		frame.Errormessage.Visible = false
	elseif command and errormessage then
		frame.LastCommand.Text = "Failure: " .. command
		frame.LastCommand.TextColor3 = Color3.fromRGB(255, 76, 76)
		frame.Errormessage.Text = errormessage
		frame.Errormessage.TextColor3 = Color3.fromRGB(255, 76, 76)
		frame.Errormessage.Visible = true
	elseif command then
		frame.LastCommand.Text = "Failure: " .. command
		frame.LastCommand.TextColor3 = Color3.fromRGB(255, 76, 76)
		frame.Errormessage.Text = "The reason for failure could not be found"
		frame.Errormessage.TextColor3 = Color3.fromRGB(255, 76, 76)
		frame.Errormessage.Visible = true
	end
end

-- // Getting the players rank

local Ranks, RankSettings = RankModule.GetRankProperties()

for key, userIds in pairs(Ranks) do
	for _, id in pairs(userIds) do
		if id == player.UserId then
			playerRank = key
		end
	end
end

-- // Checking if the players rank is nil, and if it is then we destroy everything admin-related.

if playerRank == nil then
	gui:Destroy()
end

-- // Making the frame appear when the button is clicked

button.MouseButton1Click:Connect(function()
	if frame.Visible == true then
		frame.Visible = false
	else
		frame.Visible = true
	end
end)

-- // Sending the command to module script

local clientCommands = {}

commandBox.FocusLost:Connect(function()
	local message = string.lower(commandBox.Text)
	message = string.split(message, " ")
	
	local clientCommand = false
	
	for _, str in pairs(clientCommands) do
		if message[1] == str then
			clientCommand = true
		end
	end
	
	if clientCommand == false then
		events:WaitForChild("FireServerCommand"):FireServer(playerRank, message)
	else
		local success, command, errormessage = CommandModule.RunCommand(player, playerRank, message)
		OnCommandFinished(success, errormessage, command)
	end
end)

-- // On an event fired, you change the text for whether or not the command was successful

events.FireServerCommand.OnClientEvent:Connect(function(command, success, errormessage)
	OnCommandFinished(success, errormessage, command)
end)

-- // Setting the player's icon and player name

local content = Players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
frame.PlayerIcon.Image = content
frame.PlayerName.Text = player.Name
frame.PlayerRank.Text = "Rank: " .. playerRank

-- /// Module script:
-- Just in case you need it

local module = {}

local Players = game:GetService("Players")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local RankModule = require(ReplicatedFirst:WaitForChild("Ranks"))

local events = ReplicatedStorage:WaitForChild("Events")

function module.RunCommand(player: Player, playerRank: string, variableTable: SharedTable)
	local playersToAffect = {}
	local stringToReturn = ""
	local didRunCommand = false
	
	for _, str in pairs(variableTable) do
		stringToReturn = stringToReturn .. str .. " "
		if str == "me" then
			table.insert(playersToAffect, player)
		elseif str == "others" then
			for _, plr in pairs(Players:GetChildren()) do
				if plr ~= player then
					table.insert(playersToAffect, plr)
				end
			end
		elseif str == "all" then
			for _, plr in pairs(Players:GetChildren()) do
				table.insert(playersToAffect, plr)
			end
		else
			for _, plr in pairs(Players:GetChildren()) do
				if string.lower(plr.Name) == str then
					table.insert(playersToAffect, plr)
				end
			end
		end
	end
	
	local command = variableTable[1]
	
	if playerRank == "OWNER" then
		
	end
	
	if playerRank == "DEVELOPER" or playerRank == "OWNER" then
		if command == "kill" then
			didRunCommand = true
			
			if #playersToAffect > 0 then
				for _, plr in pairs(playersToAffect) do
					if plr.Character then
						plr.Character.Humanoid.Health = 0
					end
				end
				return true, stringToReturn
			else
				return false, stringToReturn, "There were no players to affect"
			end
		end
	end
	
	if playerRank == "DEVELOPER" or playerRank == "OWNER" or playerRank == "TESTER" then
		if command == "jumpscareserver" then
			didRunCommand = true
			
			if playerRank ~= "OWNER" then
				if player.IsOnCooldown.Value == false then
					player.IsOnCooldown.Value = true
					events.JumpscarePurchase:FireAllClients(player)
					delay(60, function()
						player.IsOnCooldown.Value = false
					end)
					return true, stringToReturn
				else
					return false, stringToReturn, "You are on cooldown for this command"
				end
			else
				events.JumpscarePurchase:FireAllClients(player)
				return true, stringToReturn
			end
		end
	end
	
	if didRunCommand == false then
		return false, stringToReturn, "Command is not valid; try checking your spelling"
	end
	
end

return module
